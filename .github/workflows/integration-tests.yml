name: Integration Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '22.x'
  PNPM_VERSION: '9.x'

jobs:
  integration-tests:
    name: Integration Tests with LocalStack
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      # LocalStack service for AWS simulation
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
          - 4510-4559:4510-4559
        env:
          SERVICES: dynamodb,s3
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
          PORT_WEB_UI: 8080
          LAMBDA_EXECUTOR: local
          KINESIS_ERROR_PROBABILITY: 0.0
          DOCKER_HOST: unix:///var/run/docker.sock
          HOST_TMP_FOLDER: /tmp
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for LocalStack to be ready
        run: |
          echo "Waiting for LocalStack to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          echo "LocalStack is ready!"

      - name: Setup LocalStack resources
        run: |
          # Create DynamoDB table
          AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test aws --endpoint-url=http://localhost:4566 dynamodb create-table \
            --table-name tamafriends-local \
            --attribute-definitions \
              AttributeName=PK,AttributeType=S \
              AttributeName=SK,AttributeType=S \
              AttributeName=GSI1PK,AttributeType=S \
              AttributeName=GSI1SK,AttributeType=S \
              AttributeName=GSI2PK,AttributeType=S \
              AttributeName=GSI2SK,AttributeType=S \
              AttributeName=GSI3PK,AttributeType=S \
              AttributeName=GSI3SK,AttributeType=S \
            --key-schema \
              AttributeName=PK,KeyType=HASH \
              AttributeName=SK,KeyType=RANGE \
            --global-secondary-indexes \
              'IndexName=GSI1,KeySchema=[{AttributeName=GSI1PK,KeyType=HASH},{AttributeName=GSI1SK,KeyType=RANGE}],Projection={ProjectionType=ALL},BillingMode=PAY_PER_REQUEST' \
              'IndexName=GSI2,KeySchema=[{AttributeName=GSI2PK,KeyType=HASH},{AttributeName=GSI2SK,KeyType=RANGE}],Projection={ProjectionType=ALL},BillingMode=PAY_PER_REQUEST' \
              'IndexName=GSI3,KeySchema=[{AttributeName=GSI3PK,KeyType=HASH},{AttributeName=GSI3SK,KeyType=RANGE}],Projection={ProjectionType=ALL},BillingMode=PAY_PER_REQUEST' \
            --billing-mode PAY_PER_REQUEST \
            --region us-east-1

          # Create S3 bucket
          AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test aws --endpoint-url=http://localhost:4566 s3 mb s3://tamafriends-media-local --region us-east-1

          # Verify resources were created
          echo "Verifying DynamoDB table..."
          AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test aws --endpoint-url=http://localhost:4566 dynamodb describe-table --table-name tamafriends-local --region us-east-1

          echo "Verifying S3 bucket..."
          AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test aws --endpoint-url=http://localhost:4566 s3 ls --region us-east-1

      - name: Build packages
        run: |
          pnpm --filter @social-media-app/shared build
          pnpm --filter @social-media-app/dal build
          pnpm --filter @social-media-app/backend build

      - name: Start backend server
        run: |
          cd packages/backend
          # Set environment variables for LocalStack
          export NODE_ENV=development
          export USE_LOCALSTACK=true
          export LOCALSTACK_ENDPOINT=http://localhost:4566
          export TABLE_NAME=tamafriends-local
          export MEDIA_BUCKET_NAME=tamafriends-media-local
          export AWS_REGION=us-east-1
          export AWS_ACCESS_KEY_ID=test
          export AWS_SECRET_ACCESS_KEY=test
          export JWT_SECRET=test-secret-key-for-ci-only

          # Start server in background
          node server.js &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          echo "Waiting for backend server to be ready..."
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          echo "Backend server is ready!"

      - name: Create test user in LocalStack
        run: |
          # Create the test user that integration tests expect
          curl -X POST http://localhost:3001/auth/register \
            -H "Content-Type: application/json" \
            -d '{
              "email": "localstacktest@tamafriends.local",
              "username": "localstacktest",
              "password": "TestPassword123!"
            }'

          echo "Test user created successfully"

      - name: Run integration tests
        env:
          # Test environment configuration
          NODE_ENV: test
          USE_LOCALSTACK: true
          API_BASE_URL: http://localhost:3001
          LOCALSTACK_ENDPOINT: http://localhost:4566
          TABLE_NAME: tamafriends-local
          MEDIA_BUCKET_NAME: tamafriends-media-local
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          TEST_TIMEOUT: 30000
          ENABLE_CLEANUP: true
          DEBUG_LOGGING: true
        run: |
          pnpm --filter @social-media-app/integration-tests test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            packages/integration-tests/test-results.json
            packages/integration-tests/coverage/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          # Stop backend server
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

          # Kill any remaining Node processes
          pkill -f "node server.js" || true

  # Job for running tests in different Node.js versions
  compatibility-test:
    name: Node.js Compatibility Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 20

    strategy:
      matrix:
        node-version: ['20.x', '22.x']

    services:
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
        env:
          SERVICES: dynamodb,s3
          DEBUG: 0
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          pnpm --filter @social-media-app/shared build
          pnpm --filter @social-media-app/dal build
          pnpm --filter @social-media-app/backend build

      - name: Run basic integration test
        env:
          NODE_ENV: test
          USE_LOCALSTACK: true
          API_BASE_URL: http://localhost:3001
          LOCALSTACK_ENDPOINT: http://localhost:4566
        run: |
          # Quick compatibility check - just build and basic test
          pnpm --filter @social-media-app/integration-tests typecheck