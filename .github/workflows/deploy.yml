name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'dev'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Run smoke tests
        run: pnpm --filter @social-media-app/smoke-tests test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Deploy CDK stacks
        run: |
          cd infrastructure
          cdk deploy --all --require-approval never --context environment=dev

      - name: Get API Gateway URL
        id: get-api-url
        run: |
          cd infrastructure
          API_URL=$(aws cloudformation describe-stacks --stack-name SocialMediaApp-dev-Api --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Run deployment validation tests
        env:
          API_URL: ${{ steps.get-api-url.outputs.api_url }}
        run: |
          # Wait for API to be ready
          sleep 30
          # Run smoke tests against deployed environment
          SMOKE_TEST_URL=$API_URL pnpm --filter @social-media-app/smoke-tests test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging'
    environment: staging
    needs: deploy-dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run integration tests
        run: pnpm run test:integration

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Deploy CDK stacks
        run: |
          cd infrastructure
          cdk deploy --all --require-approval never --context environment=staging

      - name: Get staging API Gateway URL
        id: get-staging-api-url
        run: |
          cd infrastructure
          API_URL=$(aws cloudformation describe-stacks --stack-name SocialMediaApp-staging-Api --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Run staging validation tests
        env:
          API_URL: ${{ steps.get-staging-api-url.outputs.api_url }}
        run: |
          sleep 30
          SMOKE_TEST_URL=$API_URL pnpm --filter @social-media-app/smoke-tests test

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment: production
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run all tests
        run: |
          pnpm run test
          pnpm run test:integration

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Deploy CDK stacks with approval
        run: |
          cd infrastructure
          cdk deploy --all --context environment=production

      - name: Get production API Gateway URL
        id: get-prod-api-url
        run: |
          cd infrastructure
          API_URL=$(aws cloudformation describe-stacks --stack-name SocialMediaApp-production-Api --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Run production validation tests
        env:
          API_URL: ${{ steps.get-prod-api-url.outputs.api_url }}
        run: |
          sleep 60  # Extra time for production warmup
          SMOKE_TEST_URL=$API_URL pnpm --filter @social-media-app/smoke-tests test

      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful: ${{ steps.get-prod-api-url.outputs.api_url }}"
          else
            echo "❌ Production deployment failed"
          fi