{"numTotalTestSuites":37,"numPassedTestSuites":25,"numFailedTestSuites":12,"numPendingTestSuites":0,"numTotalTests":80,"numPassedTests":0,"numFailedTests":0,"numPendingTests":80,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1760291592446,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Comments Workflow Integration","Create and Retrieve Comments"],"fullName":"Comments Workflow Integration Create and Retrieve Comments should create a comment on a post successfully","status":"skipped","title":"should create a comment on a post successfully","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Create and Retrieve Comments"],"fullName":"Comments Workflow Integration Create and Retrieve Comments should create a second comment by different user","status":"skipped","title":"should create a second comment by different user","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Create and Retrieve Comments"],"fullName":"Comments Workflow Integration Create and Retrieve Comments should retrieve all comments for a post","status":"skipped","title":"should retrieve all comments for a post","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Create and Retrieve Comments"],"fullName":"Comments Workflow Integration Create and Retrieve Comments should respect pagination limit","status":"skipped","title":"should respect pagination limit","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Create and Retrieve Comments"],"fullName":"Comments Workflow Integration Create and Retrieve Comments should support pagination with cursor","status":"skipped","title":"should support pagination with cursor","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Create and Retrieve Comments"],"fullName":"Comments Workflow Integration Create and Retrieve Comments should return empty array for post with no comments","status":"skipped","title":"should return empty array for post with no comments","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Comment Validation"],"fullName":"Comments Workflow Integration Comment Validation should reject empty comment content","status":"skipped","title":"should reject empty comment content","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Comment Validation"],"fullName":"Comments Workflow Integration Comment Validation should reject comment exceeding 500 characters","status":"skipped","title":"should reject comment exceeding 500 characters","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Comment Validation"],"fullName":"Comments Workflow Integration Comment Validation should trim whitespace from comment content","status":"skipped","title":"should trim whitespace from comment content","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Comment Validation"],"fullName":"Comments Workflow Integration Comment Validation should reject comment with only whitespace","status":"skipped","title":"should reject comment with only whitespace","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Comment Validation"],"fullName":"Comments Workflow Integration Comment Validation should reject comment with invalid postId","status":"skipped","title":"should reject comment with invalid postId","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Delete Comments"],"fullName":"Comments Workflow Integration Delete Comments should delete own comment successfully","status":"skipped","title":"should delete own comment successfully","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Delete Comments"],"fullName":"Comments Workflow Integration Delete Comments should return 403 when non-owner tries to delete","status":"skipped","title":"should return 403 when non-owner tries to delete","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Delete Comments"],"fullName":"Comments Workflow Integration Delete Comments should be idempotent when deleting non-existent comment","status":"skipped","title":"should be idempotent when deleting non-existent comment","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Delete Comments"],"fullName":"Comments Workflow Integration Delete Comments should verify comment is removed from list","status":"skipped","title":"should verify comment is removed from list","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Delete Comments"],"fullName":"Comments Workflow Integration Delete Comments should return 400 when deleting with invalid commentId","status":"skipped","title":"should return 400 when deleting with invalid commentId","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Stream Processor Verification"],"fullName":"Comments Workflow Integration Stream Processor Verification should increment commentsCount after creating comment","status":"skipped","title":"should increment commentsCount after creating comment","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Stream Processor Verification"],"fullName":"Comments Workflow Integration Stream Processor Verification should decrement commentsCount after deleting comment","status":"skipped","title":"should decrement commentsCount after deleting comment","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Authorization"],"fullName":"Comments Workflow Integration Authorization should require authentication for creating comments","status":"skipped","title":"should require authentication for creating comments","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Authorization"],"fullName":"Comments Workflow Integration Authorization should require authentication for deleting comments","status":"skipped","title":"should require authentication for deleting comments","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Authorization"],"fullName":"Comments Workflow Integration Authorization should allow unauthenticated access to get comments","status":"skipped","title":"should allow unauthenticated access to get comments","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Authorization"],"fullName":"Comments Workflow Integration Authorization should reject invalid Bearer token","status":"skipped","title":"should reject invalid Bearer token","failureMessages":[],"meta":{}},{"ancestorTitles":["Comments Workflow Integration","Authorization"],"fullName":"Comments Workflow Integration Authorization should reject malformed Authorization header","status":"skipped","title":"should reject malformed Authorization header","failureMessages":[],"meta":{}}],"startTime":1760291592446,"endTime":1760291592446,"status":"failed","message":"","name":"/Users/shaperosteve/social-media-app/packages/integration-tests/src/scenarios/comments-workflow.test.ts"},{"assertionResults":[{"ancestorTitles":["Follows Workflow Integration","Follow and Unfollow Operations"],"fullName":"Follows Workflow Integration Follow and Unfollow Operations should follow a user successfully","status":"skipped","title":"should follow a user successfully","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Follow and Unfollow Operations"],"fullName":"Follows Workflow Integration Follow and Unfollow Operations should be idempotent when following the same user twice","status":"skipped","title":"should be idempotent when following the same user twice","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Follow and Unfollow Operations"],"fullName":"Follows Workflow Integration Follow and Unfollow Operations should get follow status for a user","status":"skipped","title":"should get follow status for a user","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Follow and Unfollow Operations"],"fullName":"Follows Workflow Integration Follow and Unfollow Operations should unfollow a user successfully","status":"skipped","title":"should unfollow a user successfully","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Follow and Unfollow Operations"],"fullName":"Follows Workflow Integration Follow and Unfollow Operations should be idempotent when unfollowing a user not followed","status":"skipped","title":"should be idempotent when unfollowing a user not followed","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Mutual Follow Relationships"],"fullName":"Follows Workflow Integration Mutual Follow Relationships should allow mutual follows","status":"skipped","title":"should allow mutual follows","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Mutual Follow Relationships"],"fullName":"Follows Workflow Integration Mutual Follow Relationships should handle multiple followers for one user","status":"skipped","title":"should handle multiple followers for one user","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Error Handling"],"fullName":"Follows Workflow Integration Error Handling should return 401 when following without authentication","status":"skipped","title":"should return 401 when following without authentication","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Error Handling"],"fullName":"Follows Workflow Integration Error Handling should return 400 when following with invalid userId","status":"skipped","title":"should return 400 when following with invalid userId","failureMessages":[],"meta":{}},{"ancestorTitles":["Follows Workflow Integration","Error Handling"],"fullName":"Follows Workflow Integration Error Handling should return false when checking follow status for user not followed","status":"skipped","title":"should return false when checking follow status for user not followed","failureMessages":[],"meta":{}}],"startTime":1760291592446,"endTime":1760291592446,"status":"failed","message":"","name":"/Users/shaperosteve/social-media-app/packages/integration-tests/src/scenarios/follows-workflow.test.ts"},{"assertionResults":[{"ancestorTitles":["LocalStack Image Upload Integration","Presigned URL Generation"],"fullName":"LocalStack Image Upload Integration Presigned URL Generation should generate LocalStack presigned URLs for post images","status":"skipped","title":"should generate LocalStack presigned URLs for post images","failureMessages":[],"meta":{}},{"ancestorTitles":["LocalStack Image Upload Integration","Presigned URL Generation"],"fullName":"LocalStack Image Upload Integration Presigned URL Generation should generate LocalStack presigned URLs for profile pictures","status":"skipped","title":"should generate LocalStack presigned URLs for profile pictures","failureMessages":[],"meta":{}},{"ancestorTitles":["LocalStack Image Upload Integration","Post Creation with LocalStack Images"],"fullName":"LocalStack Image Upload Integration Post Creation with LocalStack Images should create post with LocalStack image URLs","status":"skipped","title":"should create post with LocalStack image URLs","failureMessages":[],"meta":{}},{"ancestorTitles":["LocalStack Image Upload Integration","Post Creation with LocalStack Images"],"fullName":"LocalStack Image Upload Integration Post Creation with LocalStack Images should maintain LocalStack URLs in post retrieval","status":"skipped","title":"should maintain LocalStack URLs in post retrieval","failureMessages":[],"meta":{}},{"ancestorTitles":["LocalStack Image Upload Integration","Error Handling"],"fullName":"LocalStack Image Upload Integration Error Handling should handle invalid file types gracefully","status":"skipped","title":"should handle invalid file types gracefully","failureMessages":[],"meta":{}},{"ancestorTitles":["LocalStack Image Upload Integration","Error Handling"],"fullName":"LocalStack Image Upload Integration Error Handling should handle unauthenticated requests","status":"skipped","title":"should handle unauthenticated requests","failureMessages":[],"meta":{}}],"startTime":1760291592446,"endTime":1760291592446,"status":"failed","message":"","name":"/Users/shaperosteve/social-media-app/packages/integration-tests/src/scenarios/image-upload.test.ts"},{"assertionResults":[{"ancestorTitles":["Likes Workflow Integration","Like and Unlike Operations"],"fullName":"Likes Workflow Integration Like and Unlike Operations should like a post successfully","status":"skipped","title":"should like a post successfully","failureMessages":[],"meta":{}},{"ancestorTitles":["Likes Workflow Integration","Like and Unlike Operations"],"fullName":"Likes Workflow Integration Like and Unlike Operations should be idempotent when liking the same post twice","status":"skipped","title":"should be idempotent when liking the same post twice","failureMessages":[],"meta":{}},{"ancestorTitles":["Likes Workflow Integration","Like and Unlike Operations"],"fullName":"Likes Workflow Integration Like and Unlike Operations should get like status for a post","status":"skipped","title":"should get like status for a post","failureMessages":[],"meta":{}},{"ancestorTitles":["Likes Workflow Integration","Like and Unlike Operations"],"fullName":"Likes Workflow Integration Like and Unlike Operations should unlike a post successfully","status":"skipped","title":"should unlike a post successfully","failureMessages":[],"meta":{}},{"ancestorTitles":["Likes Workflow Integration","Like and Unlike Operations"],"fullName":"Likes Workflow Integration Like and Unlike Operations should be idempotent when unliking a post not liked","status":"skipped","title":"should be idempotent when unliking a post not liked","failureMessages":[],"meta":{}},{"ancestorTitles":["Likes Workflow Integration","Multiple Users Liking"],"fullName":"Likes Workflow Integration Multiple Users Liking should allow multiple users to like the same post","status":"skipped","title":"should allow multiple users to like the same post","failureMessages":[],"meta":{}},{"ancestorTitles":["Likes Workflow Integration","Error Handling"],"fullName":"Likes Workflow Integration Error Handling should return 401 when liking without authentication","status":"skipped","title":"should return 401 when liking without authentication","failureMessages":[],"meta":{}},{"ancestorTitles":["Likes Workflow Integration","Error Handling"],"fullName":"Likes Workflow Integration Error Handling should return 400 when liking with invalid postId","status":"skipped","title":"should return 400 when liking with invalid postId","failureMessages":[],"meta":{}}],"startTime":1760291592446,"endTime":1760291592446,"status":"failed","message":"","name":"/Users/shaperosteve/social-media-app/packages/integration-tests/src/scenarios/likes-workflow.test.ts"},{"assertionResults":[{"ancestorTitles":["Notifications Workflow Integration","Create Notifications via Interactions"],"fullName":"Notifications Workflow Integration Create Notifications via Interactions should create notification when user likes a post","status":"skipped","title":"should create notification when user likes a post","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Create Notifications via Interactions"],"fullName":"Notifications Workflow Integration Create Notifications via Interactions should create notification when user comments on a post","status":"skipped","title":"should create notification when user comments on a post","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Create Notifications via Interactions"],"fullName":"Notifications Workflow Integration Create Notifications via Interactions should create notification when user follows another user","status":"skipped","title":"should create notification when user follows another user","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Fetch Notifications List"],"fullName":"Notifications Workflow Integration Fetch Notifications List should retrieve all notifications for user","status":"skipped","title":"should retrieve all notifications for user","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Fetch Notifications List"],"fullName":"Notifications Workflow Integration Fetch Notifications List should respect pagination limit","status":"skipped","title":"should respect pagination limit","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Fetch Notifications List"],"fullName":"Notifications Workflow Integration Fetch Notifications List should support pagination with cursor","status":"skipped","title":"should support pagination with cursor","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Fetch Notifications List"],"fullName":"Notifications Workflow Integration Fetch Notifications List should filter notifications by status (unread)","status":"skipped","title":"should filter notifications by status (unread)","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Fetch Notifications List"],"fullName":"Notifications Workflow Integration Fetch Notifications List should return empty array for user with no notifications","status":"skipped","title":"should return empty array for user with no notifications","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Unread Count"],"fullName":"Notifications Workflow Integration Unread Count should get unread notification count","status":"skipped","title":"should get unread notification count","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Unread Count"],"fullName":"Notifications Workflow Integration Unread Count should return zero for user with no unread notifications","status":"skipped","title":"should return zero for user with no unread notifications","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Mark Notifications as Read"],"fullName":"Notifications Workflow Integration Mark Notifications as Read should mark single notification as read","status":"skipped","title":"should mark single notification as read","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Mark Notifications as Read"],"fullName":"Notifications Workflow Integration Mark Notifications as Read should be idempotent when marking already-read notification","status":"skipped","title":"should be idempotent when marking already-read notification","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Mark Notifications as Read"],"fullName":"Notifications Workflow Integration Mark Notifications as Read should update unread count after marking as read","status":"skipped","title":"should update unread count after marking as read","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Mark All Notifications as Read"],"fullName":"Notifications Workflow Integration Mark All Notifications as Read should mark all notifications as read","status":"skipped","title":"should mark all notifications as read","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Mark All Notifications as Read"],"fullName":"Notifications Workflow Integration Mark All Notifications as Read should be idempotent when no unread notifications exist","status":"skipped","title":"should be idempotent when no unread notifications exist","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Delete Notifications"],"fullName":"Notifications Workflow Integration Delete Notifications should delete notification successfully","status":"skipped","title":"should delete notification successfully","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Delete Notifications"],"fullName":"Notifications Workflow Integration Delete Notifications should be idempotent when deleting non-existent notification","status":"skipped","title":"should be idempotent when deleting non-existent notification","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Delete Notifications"],"fullName":"Notifications Workflow Integration Delete Notifications should return 403 when trying to delete another user's notification","status":"skipped","title":"should return 403 when trying to delete another user's notification","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Authorization"],"fullName":"Notifications Workflow Integration Authorization should require authentication for getting notifications","status":"skipped","title":"should require authentication for getting notifications","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Authorization"],"fullName":"Notifications Workflow Integration Authorization should require authentication for getting unread count","status":"skipped","title":"should require authentication for getting unread count","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Authorization"],"fullName":"Notifications Workflow Integration Authorization should require authentication for marking as read","status":"skipped","title":"should require authentication for marking as read","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Authorization"],"fullName":"Notifications Workflow Integration Authorization should require authentication for marking all as read","status":"skipped","title":"should require authentication for marking all as read","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Authorization"],"fullName":"Notifications Workflow Integration Authorization should require authentication for deleting notifications","status":"skipped","title":"should require authentication for deleting notifications","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Authorization"],"fullName":"Notifications Workflow Integration Authorization should reject invalid Bearer token","status":"skipped","title":"should reject invalid Bearer token","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Validation"],"fullName":"Notifications Workflow Integration Validation should reject invalid notificationId format","status":"skipped","title":"should reject invalid notificationId format","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Validation"],"fullName":"Notifications Workflow Integration Validation should reject invalid limit parameter","status":"skipped","title":"should reject invalid limit parameter","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Validation"],"fullName":"Notifications Workflow Integration Validation should reject limit exceeding maximum","status":"skipped","title":"should reject limit exceeding maximum","failureMessages":[],"meta":{}},{"ancestorTitles":["Notifications Workflow Integration","Validation"],"fullName":"Notifications Workflow Integration Validation should reject invalid filter parameter","status":"skipped","title":"should reject invalid filter parameter","failureMessages":[],"meta":{}}],"startTime":1760291592446,"endTime":1760291592446,"status":"failed","message":"","name":"/Users/shaperosteve/social-media-app/packages/integration-tests/src/scenarios/notifications-workflow.test.ts"},{"assertionResults":[{"ancestorTitles":["User Lifecycle Integration","User Registration and Profile Creation"],"fullName":"User Lifecycle Integration User Registration and Profile Creation should complete full user registration → profile creation workflow","status":"skipped","title":"should complete full user registration → profile creation workflow","failureMessages":[],"meta":{}},{"ancestorTitles":["User Lifecycle Integration","Profile Handle Management"],"fullName":"User Lifecycle Integration Profile Handle Management should enforce handle uniqueness","status":"skipped","title":"should enforce handle uniqueness","failureMessages":[],"meta":{}},{"ancestorTitles":["User Lifecycle Integration","Error Handling"],"fullName":"User Lifecycle Integration Error Handling should handle registration with duplicate email","status":"skipped","title":"should handle registration with duplicate email","failureMessages":[],"meta":{}},{"ancestorTitles":["User Lifecycle Integration","Error Handling"],"fullName":"User Lifecycle Integration Error Handling should handle registration with duplicate username","status":"skipped","title":"should handle registration with duplicate username","failureMessages":[],"meta":{}},{"ancestorTitles":["User Lifecycle Integration","Error Handling"],"fullName":"User Lifecycle Integration Error Handling should handle weak passwords","status":"skipped","title":"should handle weak passwords","failureMessages":[],"meta":{}}],"startTime":1760291592446,"endTime":1760291592446,"status":"failed","message":"","name":"/Users/shaperosteve/social-media-app/packages/integration-tests/src/scenarios/user-lifecycle.test.ts"}]}